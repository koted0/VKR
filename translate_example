Журнал исследований машинного обучения 13 (2012) 2063-2067
Отправлено 11 августа; Пересмотрено 3/12; Опубликовано 6/12
Шаблон для Python
Том Де Смедт
ТОМ.ДЕСМЕДТ@UA.AC.BE
Уолтер Дэлеманс
ВАЛЬТЕР.ДЭЛЕМАНС@UA.AC.BE
Группа компьютерной лингвистики CLiPS
Университет Антверпена
2000 Антверпен, Бельгия
Монтажер: Ченг Сун Онг
Абстрактный
Pattern — это пакет для Python 2.4+ с функционалом для веб-майнинга (Google + Twitter +
Википедия, веб-паук, парсер HTML DOM), обработка естественного языка (tagger/chunker, n-gram
поиск, анализ настроений, WordNet), машинное обучение (модель векторного пространства, кластеризация k-средних,
Naive Bayes + классификаторы k-NN + SVM) и сетевой анализ (центральность графа и визуализация).
Он хорошо документирован и содержит более 30 примеров и более 350 модульных тестов. Исходный код
под лицензией BSD и доступен по адресу http: //www. clips.ua.ac.be/pages/pattern.
Ключевые слова: Python, интеллектуальный анализ данных, обработка естественного языка, машинное обучение, графовые сети.
1. Введение
Всемирная паутина представляет собой огромную коллекцию лингвистической информации, которая за последнее десятилетие
привлекли внимание как ценный ресурс для таких задач, как машинный перевод, анализ мнений и
обнаружение тенденций, то есть «Сеть как корпус» (Kilgarriff and Grefenstette, 2003). Это использование WWW
представляет собой проблему, поскольку в Интернете есть вкрапления кода (HTML-разметка) и отсутствуют метаданные.
(языковая идентификация, части речи, семантические метки).
«Pattern» (лицензия BSD) — это пакет Python для веб-интеллектуального анализа данных, обработки естественного языка,
Китайское обучение и сетевой анализ с упором на простоту использования. Он часто предлагает набор инструментов
используется при использовании Интернета как корпуса, для которого обычно требуется несколько независимых наборов инструментов.
связаны вместе в практическом приложении. В настоящее время существует несколько таких наборов инструментов с пользовательским интерфейсом.
научное сообщество, например ORANGE (DemSar et al., 2004) для машинного обучения и GEPHI
(Bastian et al., 2009) для визуализации графиков. Напротив, PATTERN больше связан с наборами инструментов, такими как
как NLTK (Bird et al., 2009), PYBRAIN (Schaul et al., 2010) и NETWORKX (Hagberg et al., 2008),
в том смысле, что он ориентирован на интеграцию в собственные программы пользователя. Кроме того, он не специализируется на
один домен, но обеспечивает общую междоменную функциональность.
Пакет призван быть полезным как для научной, так и для ненаучной аудитории. Синтаксис
простой. Имена функций и параметры были выбраны таким образом, чтобы команды выполнялись автоматически.
объяснительный. Документация не предполагает никаких предварительных знаний. Мы считаем, что PATTERN ценен
как учебная среда для студентов, как среда быстрой разработки для веб-разработчиков и
в исследовательских проектах с коротким циклом разработки.
2012 Том Де Смедт и Уолтер Дэлеманс.
ДЕ СМЕДТ И ДЭЛЕМАНС
Google
именная фраза с названием бренда
йаху
BRAND|NP VPJJ+ «Новый iPhone будет потрясающим
твиттер
прилагательное (я) после глагольной фразы
википедия
Рисунок 1: Пример рабочего процесса. Текст извлекается из Интернета и ищется по синтаксису и семантике.
Анализ тональности (положительный/отрицательный) выполняется по совпадающим фразам.
2. Обзор пакета
ШАБЛОН организован в виде отдельных модулей, которые могут быть объединены в цепочку, как показано на рисунке 1.
Например, текст из Википедии (pattern.web) может быть проанализирован на наличие тегов частей речи (pattern.en),
запрашивается по синтаксису и семантике (pattern.search) и используется для обучения классификатора (pattern.vector).
pattern.web Инструменты для интеллектуального анализа веб-данных с использованием механизма загрузки, поддерживающего кэширование.
прокси, асинхронные запросы и перенаправление. Класс SearchEngine предоставляет единый API
к нескольким веб-сервисам: Google, Bing, Yahoo!, Twitter, Wikipedia, Flickr и лентам новостей.
FEED PARSER (packages.python.org/feedparser). Модуль включает парсер HTML на основе
на BEAUTIFUL SOUP (crummy.com/software/beautifulsoup), парсере PDF на основе PDFMINER
(unixuser.org/euske/python/pdfminer), поисковый робот и интерфейс веб-почты.
pattern.en Быстрый неглубокий синтаксический анализатор английского языка на основе регулярных выражений (идентифицирует контекст предложения).
заместители, например, существительные, глаголы), с использованием тега части речи с конечным состоянием (Brill, 1992), расширенного с помощью
токенизатор, лемматизатор и чанчер. Точность таггера Брилла составляет 95% и выше. Парсер с более высоким
точность (MBsp) может быть подключена. Модуль имеет класс Sentence для обхода дерева синтаксического анализа,
функции для сингуляризации/множественности (Conway, 1998), спряжения, модальности и тональности
анализ. Он поставляется в комплекте с WORDNET3 (Fellbaum, 1998) и PYWORDNET.
pattern.nl Облегченная реализация pattern.en для голландского языка с использованием языка BRILL-NL.
модель (Geertzen, 2010). Участникам рекомендуется прочитать документацию разработчика о том, как
чтобы добавить поддержку других языков.
pattern.search Алгоритм сопоставления шаблонов N-грамм для объектов Sentence. Алгоритм использует
подход, аналогичный регулярным выражениям. Поисковые запросы могут включать в себя смесь слов, фраз,
части речи, термины таксономии (например, домашнее животное = собака, кошка или золотая рыбка) и управляющие символы (например,
+ = несколько, * = любой, () = необязательно) для извлечения соответствующей информации.
pattern.vector Модель векторного пространства с использованием класса Document и Corpus. Документы лем
матизированные наборы слов, которые можно сгруппировать в разреженный корпус для вычисления TF-IDF, метрик расстояния
(косинусный, евклидов, манхэттенский, хемминговый) и уменьшение размерности (скрытый семантический анализ).
Модуль включает в себя иерархический алгоритм кластеризации и алгоритм кластеризации k-средних, оптимизированный с помощью алгоритма k-средних.
алгоритм инициализации означает++ (Артур и Васильвицкий, 2007) и неравенство треугольника (Элькан,
2003). Наивный байесовский классификатор, k-NN и SVM-классификатор с использованием LIBsVM (Chang and Li, 2011)
включены инструменты для выбора функций (получение информации) и K-кратная перекрестная проверка.
2064
ШАБЛОН ДЛЯ ПИТОНА
pattern.graph Структура данных графа с использованием классов Node, Edge и Graph, полезная (например)
для моделирования семантических сетей. Модуль имеет алгоритмы поиска кратчайшего пути, подграф пункт
разделение, центральность по собственному вектору и центральность по промежуточности (Brandes, 2001). Алгоритмы центральности
были перенесены с NETwORKX. Модуль имеет принудительный алгоритм компоновки, который позиционирует узлы
в 2D пространстве. Визуализации можно экспортировать в HTML и управлять ими в браузере (используя наш
холст . js для элемента HTML5 Canvas2D).
pattern.metrics Функции описательной статистики. Метрики оценки, включая профилировщик кода,
функции точности, прецизионности и полноты, матрица путаницы, согласие между экспертами (каппа Флейсса)
сходство строк (Левенштейн, Дайс) и читабельность (Флеш).
pattern.db Оболочки для файлов CsV и баз данных sQLITE и MYsQL.
3. Пример сценария
Например, мы объединяем четыре модуля PATTERN для обучения классификатора k-NN на прилагательных.
добыто из твиттера. Во-первых, мы собираем 1500 твитов с хэштегом #win или #fail (наши классы), чтобы
пример: "20 долларов чаевые милой старушке сегодня #win". Мы анализируем теги части речи для
каждый твит, сохраняя прилагательные. Мы группируем векторы прилагательных в корпус и используем его для обучения
классификатор. Он предсказывает «сладкое» как ПОБЕДУ и «глупое» как НЕУДАЧУ. Результаты могут различаться в зависимости от того, что
в настоящее время гудит в Твиттере.
Исходный код показан на рис. 2. Его размер репрезентативен для многих реальных сценариев.
хотя реальному классификатору может потребоваться больше обучающих данных и более строгий отбор признаков.
из pattern.web импортировать Twitter
из pattern.en импортировать предложение, анализировать
из pattern.search импортировать поиск
импортировать из pattern.vector Document, Corpus, KNN
корпус = корпус()
для я в диапазоне (1,15):
для твита в Twitter().search('#win OR #fail', start=i, count=l00):
p = '#win' в tweet.description.lower() и 'WIN' или 'FAIL'
s = твит.описание.ниже()
s = предложение (разбор (ы))
s = search('JJ', s) # JJ = прилагательное
s = [match[0].string для совпадения в s]
я = я'.присоединиться(я)
если len(s) > 0:
corpus.append (Документ (ы, тип = p))
классификатор = КНН()
для документа в корпусе:
classifier.train(документ)
print classifier.classify('sweet') # дает 'WIN'
print classifier.classify('stupid') # выдает 'FAIL'd
Рисунок 2: Пример исходного кода для классификатора k-NN, обученного на сообщениях Twitter
2065
ДЕ СМЕДТ И ДЭЛЕМАНС
4. Тематическое исследование
В качестве примера мы использовали PATTERN для создания нидерландского лексикона настроений (De Smedt and Daelemans,
2012). Мы изучили онлайн-рецензии на книги на голландском языке и выделили 1000 наиболее часто встречающихся прилагательных.
Они были вручную аннотированы положительными, отрицательными и субъективными оценками. Затем мы
расширил лексикон с помощью дистрибутивного расширения. Из корпуса TWNC (Ordelman et al., 2007)
мы извлекли наиболее часто встречающиеся существительные и прилагательные, предшествующие этим существительным. Это приводит к
векторное пространство с примерно 5750 векторами прилагательных с существительными в качестве признаков. Для каждого аннотированного
прилагательное, мы затем вычислили k-NN и унаследовали его оценки соседним прилагательным. Лексикон
включены в ШАБЛОН 2.3.
5. Документация
PATTERN поставляется в комплекте с примерами и модульными тестами. Документация содержит краткий обзор,
инструкция по установке, а для каждого модуля подробная страница со справочником по API, примерами
использование и обсуждение научных принципов. Документация не предполагает никаких предварительных знаний,
за исключением фона в программировании на Python. Набор модульных тестов включает в себя набор корпусов для
точность тестирования, например POLARITY DATA SET V2.0 (Pang and Lee, 2004).
6. Исходный код
PATTERN написан на чистом Python, а это означает, что мы жертвуем производительностью ради скорости разработки.
и удобочитаемость (т. е. медленные алгоритмы кластеризации). Пакет работает на всех платформах и не имеет
зависимости, за исключением NumPy, когда используется LSA. Исходный код аннотирован
комментарии разработчиков. Он размещен в Интернете на GitHub (github.com) с использованием системы контроля версий Git.
система. Вклад приветствуется.
Исходный код выпущен под лицензией BSD, поэтому его можно включать в проприетарные
продукты или используются в сочетании с другими пакетами с открытым исходным кодом, такими как sCRAPY (веб-майнинг),
NLTK (обработка естественного языка), PYBRAIN и PYML (машинное обучение) и NETWORKX (сетевой
анализ работы). Мы предоставляем интерфейс для MBSP FOR PYTHON (De Smedt et al., 2010), надежную,
неглубокий синтаксический анализатор на основе памяти, построенный на программном обеспечении машинного обучения TIMBL. API для
Анализатор PATTERN и MBSP идентичны.
Благодарности
Разработка финансировалась Фондом промышленных исследований (IOF) Университета Антверпена.
Рекомендации
Дэвид Артур и Сергей Васильвицкий. k-means++: преимущества тщательного посева. Продолжить
материалы восемнадцатого ежегодного симпозиума ACM-SIAM по дискретным алгоритмам, стр. 1027–1035,
2007.
Матье Бастиан, Себастьян Хейманн и Матье Жакоми. Gephi: программное обеспечение с открытым исходным кодом для
изучение и манипулирование сетями. Материалы Третьей Международной конференции ICWSM-
энце, 2009.
2066
ШАБЛОН ДЛЯ ПИТОНА
Стивен Бёрд, Юэн Кляйн и Эдвард Лоупер. Обработка естественного языка с помощью Python. О'Рейли
СМИ, 2009.
Ульрик Брандес. Более быстрый алгоритм центральности по промежуточности. Журнал математических соц.
0gy, 25(2):163177, 2001.
Эрик Брилл. Простой теггер частей речи на основе правил. Материалы Третьей конференции по
Прикладная обработка естественного языка, страницы 152-155, 1992.
Чжи-Чунг Чанг и Чжи-Джен Ли. LIBSVM: библиотека для машин опорных векторов. АКМ
Сделки по интеллектуальным системам и технологиям, 2 (3), 2011 г.
Дэмиан Конвей. Алгоритмический подход к множественному множеству английского языка. Материалы второго
Ежегодная конференция Perl, 1998 г.
Том Де Смедт и Уолтер Далеманс. Вреселийк муи! (ужасно красиво): лексикон субъективности
для голландских прилагательных. Материалы 8-й конференции по языковым ресурсам и оценке
(LREC'12), страницы 3568-3572, 2012.
Том Де Смедт, Винсент Ван Аш и Уолтер Далеманс. Неглубокий синтаксический анализатор на основе памяти для
питон. Серия технических отчетов CLiPS, 2, 2010 г.
Янез ДемСар, Блаз Зупан, Грегор Лебан и Томаз Курк. Оранжевый: от экспериментальной машины
обучение интерактивному анализу данных. Обнаружение знаний в базах данных, 3202:537-539, 2004.
Чарльз Элкан. Использование неравенства треугольника для ускорения k-средних. Труды двадцатого
Международная конференция по машинному обучению, стр. 147–153, 2003 г.
Кристиан Фельбаум. WordNet: электронная лексическая база данных. MIT Press, Кембридж, 1998 г.
Йерун Герцен. Jeroen Geertzen :: программное обеспечение и демонстрации: Brill-nl, июнь 2010 г. URL http:
//cosmion.net/jeroen/software/brill\_pos/.
Арик Хагберг, Дэниел Шульт и Питер Сварт. Изучение сетевой структуры, динамики и функций
с помощью networkx. Материалы 7-й конференции Python в науке, страницы 11–15, 2008 г.
Адам Килгаррифф и Грегори Грефенштетт. Введение в специальный выпуск в Интернете как корпус.
Компьютерная лингвистика, 29(3):333-347, 2003.
Руланд Ордельман, Франциска де Йонг, Арьян ван Хессен и Хендри Хондорп. TwNC: Мульти
многогранный голландский свод новостей. Информационный бюллетень ELRA, 12:3-4, 2007 г.
Бо Панг и Лилиан Ли. Сентиментальное образование: анализ настроений с использованием суммирования субъективности.
ризация на основе минимальных сокращений. Труды ACL, страницы 271–278, 2004 г.
Том Шаул, Джастин Байер, Даан Вирстра, Йи Сун, Мартин Фелдер, Фрэнк Сенке, Томас РакстиБ.
 и Ирген Шмидхубер. Пибрейн. Журнал исследований машинного обучения, страницы 743–746, 2010 г.
2067